#!/usr/bin/php
<?php
/**
* JoomlaCliTools
*
* @version     $Id$
* @package     JoomlaCliTools
* @subpackage  OAuth2Tester
* @copyright   Copyright 2004 - 2021 Matias Aguirre. All rights reserved.
* @license     GNU General Public License version 2 or later.
* @author      Matias Aguirre <maguirre@matware.com.ar>
* @link        https://matware.com.ar
*/
// We are a valid Joomla entry point.
define('_JEXEC', 1);

// Setup the base path related constant.
define('JPATH_BASE', dirname(__FILE__));

// Bootstrap the application.
require dirname(dirname(__FILE__)).'/bootstrap.php';

// JConfig
if (file_exists( __DIR__ . '/configuration.php'))
{
	require __DIR__ . '/configuration.php';
}

use Joomla\CMS\Http\Http;
use Joomla\Registry\Registry;
use Joomla\CMS\Factory;
use Joomla\CMS\Log\Log;

class OAuth2Tester extends JApplicationCli
{
	/**
	 * @var    ROAuth2Client  OAuth client for the Google authentication object.
	 * @since  1.0
	 */
	public $client;

	/**
	 * @var    JHttp  Joomla! HTTP Class
	 * @since  1.0
	 */
	protected $http;

	/**
	* Class constructor.
	*
	* @return void
	*
	* @since 1.0
	*/
	public function __construct(Registry $options = null, JOAuth2Client $client = null)
	{
		// Call the parent __construct method so it bootstraps the application class.
		parent::__construct();

		// Set the custom options if exists
		$this->options = isset($options) ? $options : new Registry(new JConfig);

		// Prevent Joomla! libraries error
		// PHP Notice:  Undefined index: HTTP_HOST
		$_SERVER['HTTP_HOST'] = null;

		// Creating first dabatase instance
		$this->_db = Factory::getDBO();

		// JHttp instance
		$this->http = new Http();

		// Add the logger.
		Log::addLogger(
			// Pass an array of configuration options
			array(
				// Set the name of the log file
				'text_file' => JPATH_BASE.'/logs/OAuth2Tester.log.php'
			)
		);
	}

	/**
	 * execute
	 *
	 * @return	none
	 * @since	1.0
	 */
  public function execute()
  {
		// Initialise the OAuth 2.0 client
		$client = new MClientOAuth2($this->options);

		// Send the initial session request
		$client->setOption('url', $this->options->get('hostname').'/api/mets:login');

		// Fetch the token from server
		$token = $client->fetchAccessToken();

print_r($token);

		// Get the resource
		//$resource = $client->getResource($token->access_token);

		//$resourceObj = 		json_decode($resource);
		//print_r($resourceObj);

	} // end method

} // end class

// Wrap the execution in a try statement to catch any exceptions thrown anywhere in the script.
try
{
	// Instantiate the application object, passing the class name to JApplicationCli::getInstance
	// and use chaining to execute the application.
	JApplicationCli::getInstance('OAuth2Tester')->execute();
}
catch (Exception $e)
{
	// An exception has been caught, just echo the message.
	fwrite(STDOUT, $e->getMessage() . "\n");
	exit($e->getCode());
}
