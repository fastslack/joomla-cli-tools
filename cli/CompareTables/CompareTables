#!/usr/bin/php
<?php
/**
* JoomlaCliTools
*
* @version $Id$
* @package JoomlaCliTools
* @subpackage CompareTables
* @copyright Copyright 2004 - 2013 Matias Aguirre. All rights reserved.
* @license GNU General Public License version 2 or later.
* @author Matias Aguirre <maguirre@matware.com.ar>
* @link http://www.matware.com.ar
*/
// We are a valid Joomla entry point.
define('_JEXEC', 1);

// Setup the base path related constant.
define('JPATH_BASE', dirname(__FILE__));

// Bootstrap the application.
require dirname(dirname(dirname(__FILE__))).'/bootstrap.php';

class CompareTables extends JApplicationCli
{
	/**
	* Ascii color array
	*
	* @var array
	* @since 1.0
	*/
	public $_colors = array(
		'LIGHT_RED'   => "\033[1;31m",
		'LIGHT_GREEN' => "\033[1;32m",
		'YELLOW'      => "\033[1;33m",
		'LIGHT_BLUE'  => "\033[1;34m",
		'MAGENTA'     => "\033[1;35m",
		'LIGHT_CYAN'  => "\033[1;36m",
		'WHITE'       => "\033[1;37m",
		'NORMAL'      => "\033[0m",
		'BLACK'       => "\033[0;30m",
		'RED'         => "\033[0;31m",
		'GREEN'       => "\033[0;32m",
		'BROWN'       => "\033[0;33m",
		'BLUE'        => "\033[0;34m",
		'CYAN'        => "\033[0;36m",
		'BOLD'        => "\033[1m",
		'UNDERSCORE'  => "\033[4m",
		'REVERSE'     => "\033[7m",
	);

	/**
	* Class constructor.
	*
	* @return void
	*
	* @since 2.5.0
	*/
	public function __construct()
	{
		// Call the parent __construct method so it bootstraps the application class.
		parent::__construct();
	
		// Getting the parameters
		$this->params = new JRegistry(new JConfig);

		// Creating first dabatase instance
		$this->_db = JFactory::getDBO();

		// Creating second dabatase instance
		$this->_db_new = JDatabase::getInstance(
			array(
			'driver' => $this->get('new_dbtype'),
			'host' => $this->get('new_hostname'),
			'user' => $this->get('new_username'),
			'password' => $this->get('new_password'),
			'database' => $this->get('new_db'),
			'prefix' => $this->get('new_dbprefix'),
			)
		);

	}

	/**
	 * Execute
	 *
	 * @since	1.0
	 */
	public function execute()
	{
		// Initialize return
		$return = "<?php\n\n";

		// Getting the pattern and split with the prefix
		$pattern = $this->get('dbprefix').$this->get('pattern');
		$new_pattern = $this->get('new_dbprefix').$this->get('new_pattern');

		// Getting the tables array
		$tables = $this->getTables($this->_db, $pattern);
		$new_tables = $this->getTables($this->_db_new, $new_pattern);

		// Getting the prefix with the component name too
		$prefix = (substr($pattern, -1) == '%') ? substr_replace($pattern, "_", -1) : $pattern."_";
		$new_prefix = (substr($new_pattern, -1) == '%') ? substr_replace($new_pattern, "_", -1) : $new_pattern."_";

		// Getting the variable to show the table on stdin
		$show_tables_diff = ($this->get('show_tables_diff') === true) ? '&' : '';

		for ($y=0;$y<count($tables);$y++) {

			//$this->out($this->_colors['RED']);
			//$this->out("-------------------------------------[ {$tables[$y]} ]----------------------------------------------------");

			// Removing the prefix of the table
			$table_without_prefix = str_replace($this->get('dbprefix'), "", $tables[$y]);
			$table_without_prefix_and_name = str_replace($prefix, "", $tables[$y]);

			// Getting the first table columns and save it to tmp file
			$this->writeColumnsToFile ($this->_db, $tables[$y]);

			// Getting the new table name
			$tablename = $new_prefix.$table_without_prefix_and_name;

			if ( $this->tableExists($tablename) === true) {

				// Getting the second table columns and save it to tmp file
				$this->writeColumnsToFile ($this->_db_new, $tablename);

				// Writting the differences to file or/and show it on stdin
				$command = 'diff -Nru sql/'.$tables[$y].'.columns sql/'.$tablename.'.columns '.$show_tables_diff.'> sql/'.$tables[$y].'.diff';
				system($command);

			// Empty tables
			}else if ($this->get('show_tables_empty') === true) {

				// Writting the differences to file or/and show it on stdin
				$command = 'diff -Nru /dev/null sql/'.$tables[$y].'.columns '.$show_tables_diff.'> sql/'.$tables[$y].'.diff';
				system($command);
			}

			/*
			 * Creating mysql ALTER query
			 */
			if ($this->get('create_alter_query') === true && $this->tableExists($tablename) === true) {

				// Getting the table with default prefix
				$table = "#__".$table_without_prefix;

				// Initialize ALTER query response
				//$query = "\t\t\$query = \"ALTER TABLE {$table}\"\n";

				// Reading the file
				$read = JFile::read('sql/'.$tables[$y].'.diff');
				$read = explode("\n", $read);

				// Count the lines
				$read_count = count($read);

				// Remove the last empty value
				$read = array_slice($read, 0, $read_count-1);

				// Initialize variables
				$addrop = $unset = '';
				$disable = true;

				for($i=3;$i<$read_count-1;$i++) {

					$line = $read[$i];

					$char = substr($line, 0, 1);
					$column =  substr($line, 1, strlen($line));

					if ($char == "+" || $char == "-") {
						
						$disable = false;

						if ($char == "+") {
							$addrop .= "\t\t\t.\" ADD {$column}";
						}else if ($char == "-") {
							$column = explode(" ", $column);
							$column = $column[0];

							$addrop .= "\t\t\t.\" DROP COLUMN `{$column}`";
							$unset .= "\t\t\tunset(\$row['{$column}']);\n";
						}

						if ($i == $read_count - 2) {
							$addrop .= "\";\n";
						}else{
							$addrop .= ",\"\n";
						}

					}

				}

				if ($this->get('create_jupgradepro_function') == true) {
					$return .= $this->createjUpgradeProFunction($table_without_prefix, $addrop, $unset, $disable);
				}else{
					$return .= $addrop;
				}

			} // end if

		} // end for

		echo $return;

	} // end method

	/**
	 * Create the jUpgradePro function to use with the libraries
	 *
	 * @param   string   $table     The table fs this function
	 * @param   string   $alter     The alter query
	 * @param   string   $unset     The unset functions list
	 *
	 * @return  mixed    The return the function body or null if the query failed.
	 *
	 * @since   1.0
	 */
	public function createjUpgradeProFunction($table, $alter = null, $unset = null, $disable = true) {

		$disable = ($disable === true) ? "//" : "";

		// Reading the datahook template
		$structurehook = JFile::read(JPATH_BASE.'/templates/jupgradepro.structurehook.php');
		$structurehook = str_replace("{DISABLE}", $disable, $structurehook);
		$structurehook = str_replace("{TABLE}", $table, $structurehook);
		$structurehook = str_replace("{ALTER}", $alter, $structurehook);

		// Reading the datahook template
		$datahook = JFile::read(JPATH_BASE.'/templates/jupgradepro.datahook.php');
		$datahook = str_replace("{TABLE}", $table, $datahook);
		$datahook = str_replace("{UNSET}", $unset, $datahook);

		$body = $structurehook.$datahook;

		return $body;
	}


	/**
	 * Set the table using mysql pattern
	 *
	 * @param   JDatabase   $db     Database connector class.
	 * @param   string   $pattern     Pattern matching using SQL simple regular expression comparison.
	 * @url	http://dev.mysql.com/doc/refman/5.0/en/string-comparison-functions.html#operator_like
	 *
	 * @return  mixed    The return value or null if the query failed.
	 *
	 * @since   1.0
	 */
	public function getTables(&$db, $pattern) {

		$query = "SHOW TABLES LIKE '{$pattern}'";
		$db->setQuery( $query );
		
		return $db->loadColumn();
	} // end method

	/**
	 * Check if table exists
	 *
	 * @param   string   $pattern     The table name
	 *
	 * @return  bool    True if exists
	 *
	 * @since   1.0
	 */
	function tableExists ($table) { 
		$tables = array();
		$tables = $this->_db_new->getTableList();

		return (in_array($table, $tables)) ? true : false;
	} // end method

	/**
	 * Write the columns of the table to file
	 *
	 * @param   JDatabase   $db     The database instance
	 * @param   string   $table     The table name
	 *
	 * @return  bool    True if ok
	 *
	 * @since   1.0
	 */
	function writeColumnsToFile ($db, $table) { 
		/*
		 * Getting the first table columns and save it to tmp file
		 */
		$query = "SHOW COLUMNS FROM {$table}";
		$db->setQuery( $query );
		$columns = $db->loadObjectList();

		$tbl = fopen('sql/'.$table.'.columns', 'wb');

		for($i=0;$i<count($columns);$i++) {
			$null = ($columns[$i]->Null == 'YES') ? 'NULL' : 'NOT NULL';
			fwrite($tbl, $columns[$i]->Field." ".$columns[$i]->Type." ".$null."\n");
		}
		fclose($tbl);

		return true;
	} // end method

} // end class

// Wrap the execution in a try statement to catch any exceptions thrown anywhere in the script.
try
{
	// Instantiate the application object, passing the class name to JCli::getInstance
	// and use chaining to execute the application.
	JApplicationCli::getInstance('CompareTables')->execute();
}
catch (Exception $e)
{
	// An exception has been caught, just echo the message.
	fwrite(STDOUT, $e->getMessage() . "\n");
	exit($e->getCode());
}
