#!/usr/bin/php
<?php
/**
* DeleteRows
*
* @version $Id$
* @package JoomlaCliTools
* @subpackage DeleteRows
* @copyright Copyright 2004 - 2015 Matias Aguirre. All rights reserved.
* @license GNU General Public License version 2 or later.
* @author Matias Aguirre <maguirre@matware.com.ar>
* @link http://www.matware.com.ar
*/
// We are a valid Joomla entry point.
define('_JEXEC', 1);

// Setup the base path related constant.
define('JPATH_BASE', dirname(__FILE__));

// Bootstrap the application.
require dirname(dirname(__FILE__)).'/bootstrap.php';

/**
 * This class checks some common situations that occur when the asset table is corrupted.
 */
// Instantiate the application.
class DeleteRows extends JApplicationCli
{
	/**
	* Ascii color array
	*
	* @var array
	* @since 1.0
	*/
	public $_c = array(
		'LIGHT_RED'   => "\033[1;31m",
		'LIGHT_GREEN' => "\033[1;32m",
		'YELLOW'      => "\033[1;33m",
		'LIGHT_BLUE'  => "\033[1;34m",
		'MAGENTA'     => "\033[1;35m",
		'LIGHT_CYAN'  => "\033[1;36m",
		'WHITE'       => "\033[1;37m",
		'NORMAL'      => "\033[0m",
		'BLACK'       => "\033[0;30m",
		'RED'         => "\033[0;31m",
		'GREEN'       => "\033[0;32m",
		'BROWN'       => "\033[0;33m",
		'BLUE'        => "\033[0;34m",
		'CYAN'        => "\033[0;36m",
		'BOLD'        => "\033[1m",
		'UNDERSCORE'  => "\033[4m",
		'REVERSE'     => "\033[7m",
	);

	/**
	 * Overrides the parent doExecute method to run the web application.
	 *
	 * This method should include your custom code that runs the application.
	 *
	 * @return  void
	 *
	 * @since   1.0
	 */

	public function __construct()
	{
		// Call the parent __construct method so it bootstraps the application class.
		parent::__construct();
	
		// Getting the parameters
		$this->params = new JRegistry(new JConfig);

		// Creating first dabatase instance
		$this->_db = JFactory::getDBO();
	}

	protected function doExecute()
	{

/*
SELECT s.session_id FROM `bzjo9_mets_patients` AS p 
LEFT JOIN `bzjo9_mets_sessions2` AS s ON s.patient_id = p.patient_id 
WHERE p.place = 3 AND s.session_id IS NOT NULL

SELECT * FROM `bzjo9_mets_sessions` WHERE mode != "" AND DATE_SUB(CURDATE(),INTERVAL 2 DAY) <= start ORDER BY `session_id` DESC


*/

		// Fixing categories assets
		$query = $this->_db->getQuery(true);

		$query->select('s.session_id');

		// All
		$query->from('#__mets_patients AS p');
		$query->join('LEFT', '#__mets_sessions AS s ON s.patient_id = p.patient_id');
		$query->where("p.place = 3");
		$query->where("s.session_id IS NOT NULL");

		// Limited time
		//$query->from('#__mets_sessions AS s');
		//$query->where("s.mode != ''");
		//$query->where("DATE_SUB(CURDATE(),INTERVAL 2 DAY) <= s.start");

		$query->order("s.session_id ASC");

		//$this->_db->setQuery($query, 0, 100);
		$this->_db->setQuery($query);
		$sessions = $this->_db->loadObjectList();

//print_r($sessions);

		// Count items
		$count = count($sessions);

		// Include the content table path
		JTable::addIncludePath(JPATH_LIBRARIES . '/legacy/table/');

		// Write title to buffer
		$this->out("{$this->_c['WHITE']}-------------------------------------------------------------------------------------------------");
		$this->out("{$this->_c['WHITE']}|  {$this->_c['BLUE']}	Deleting {$count} items");
		$this->out("{$this->_c['WHITE']}-------------------------------------------------------------------------------------------------");
		echo "{$this->_c['WHITE']}|  {$this->_c['RED']}[{$this->_c['YELLOW']}";

		$benchmark_start = microtime(true);

		// Deleting
		foreach ($sessions as $session)
		{
			$query->clear();
			$query->delete()->from("#__mets_sessions")->where("session_id = {$session->session_id}");

			try {
				$this->_db->setQuery($query)->execute();
			} catch (RuntimeException $e) {
				throw new RuntimeException($e->getMessage());
			}

			// Write ˕ to buffer
			echo "˕";
			// Free
			//unset($table);
		}

		// Closing buffer
		$this->out( "{$this->_c['RED']}]" );

		$benchmark_end = microtime(true);
		$benchmark = $benchmark_end - $benchmark_start;
		$this->out( "\n{$this->_c['CYAN']}[[TOTAL Benchmark]] ".round($benchmark, 3)." seconds" );


	}

} // end class

// Wrap the execution in a try statement to catch any exceptions thrown anywhere in the script.
try
{
	// Instantiate the application object, passing the class name to JCli::getInstance
	// and use chaining to execute the application.
	JApplicationCli::getInstance('DeleteRows')->execute();
}
catch (Exception $e)
{
	// An exception has been caught, just echo the message.
	fwrite(STDOUT, $e->getMessage() . "\n");
	exit($e->getCode());
}
