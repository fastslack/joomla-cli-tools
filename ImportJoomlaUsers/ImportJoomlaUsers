#!/usr/bin/php
<?php
/**
* JoomlaCliTools
*
* @version $Id$
* @package MatWare
* @subpackage ImportJoomlaUsers
* @copyright Copyright 2004 - 2016 Matias Aguirre. All rights reserved.
* @license GNU General Public License version 2 or later.
* @author Matias Aguirre <maguirre@matware.com.ar>
* @link http://www.matware.com.ar
*/
// We are a valid Joomla entry point.
define('_JEXEC', 1);

// Setup the base path related constant.
define('JPATH_BASE', dirname(__FILE__));

if (!defined('JPATH_CONFIGURATION'))
{
	define('JPATH_CONFIGURATION', __DIR__);
}

// Bootstrap the application.
require dirname(dirname(__FILE__)).'/bootstrap.php';


class MigrateCSV2MySQL extends JApplicationCli
{
	/**
	* Ascii color array
	*
	* @var array
	* @since 1.0
	*/
	public $_c = array(
		'LIGHT_RED'   => "\033[1;31m",
		'LIGHT_GREEN' => "\033[1;32m",
		'YELLOW'      => "\033[1;33m",
		'LIGHT_BLUE'  => "\033[1;34m",
		'MAGENTA'     => "\033[1;35m",
		'LIGHT_CYAN'  => "\033[1;36m",
		'WHITE'       => "\033[1;37m",
		'NORMAL'      => "\033[0m",
		'BLACK'       => "\033[0;30m",
		'RED'         => "\033[0;31m",
		'GREEN'       => "\033[0;32m",
		'BROWN'       => "\033[0;33m",
		'BLUE'        => "\033[0;34m",
		'CYAN'        => "\033[0;36m",
		'BOLD'        => "\033[1m",
		'UNDERSCORE'  => "\033[4m",
		'REVERSE'     => "\033[7m",
	);



	/**
	* Class constructor.
	*
	* @return void
	*
	* @since 2.5.0
	*/
	public function __construct()
	{
		// Call the parent __construct method so it bootstraps the application class.
		parent::__construct();

		// Getting the parameters
		$this->params = new JRegistry(new JConfig);

		// Creating first dabatase instance
		$this->_db = JFactory::getDBO();

		$this->profile_fields = array();
		$this->profile_fields[] = 'gender';
		$this->profile_fields[] = 'region';
		$this->profile_fields[] = 'city';
		$this->profile_fields[] = 'phone';
		$this->profile_fields[] = 'jobplace';
		$this->profile_fields[] = 'org';

	}

	/**
	 * Screen
	 *
	 * @return	none
	 * @since	2.5.0
	 */
	public function screen()
	{
		// Print help
		$this->out();
		$this->out(' MigrateCSV2MySQL v1.0');
		$this->out(' Usage: MigrateCSV2MySQL [--migrate OR/AND --clean] file.csv');
		$this->out();
		$this->out(' Author: Matias Aguirre (maguirre@matware.com.ar)');
		$this->out(' License: GNU/GPL http://www.gnu.org/licenses/gpl-2.0-standalone.html');
		$this->out();
		exit;
	}

	/**
	 * Execute
	 *
	 * @return	none
	 * @since	2.5.0
	 */
	public function doExecute()
	{

		$clean = $this->input->get('clean');
		$migrate = $this->input->get('migrate');

		if (empty($clean) && empty($migrate)) {
			$this->screen();
		}

		if (!empty($clean)) {
			$this->clean($clean);
		}

		if (!empty($migrate)) {

			$migrate = ($migrate == 1 && isset($clean)) ? $clean : $migrate;

			$this->migrate($migrate);
		}


	} // end method

	public function migrate($file)
	{
		$ext = JFile::getExt($file);
		$name = JFile::stripExt(basename($file));

		if ($ext == 'new') {
			$name = JFile::stripExt($name);
		}

		$tablename = '#__import_'.strtolower($name);
var_dump($file);
		//$read = file_get_contents ($file);
		$read = JFile::read($file);
		$arrRead = explode("\n", $read);

		$count = count($arrRead);

		$counter = 0;

		$this->out("{$this->_c['WHITE']}-------------------------------------------------------------------------------------------------");
		$this->out("{$this->_c['WHITE']}|  {$this->_c['BLUE']}	Importing Joomla Users. {$count} rows.");

		echo "{$this->_c['WHITE']}|  {$this->_c['RED']}[{$this->_c['YELLOW']}";

		for($i=0;$i<$count;$i++) {

			$line = &$arrRead[$i];


			//$array =

			//var_dump($line);
			//echo "\n";


			if ($i == 0) {

				$first_line = $line;
				$first_line_exp = explode(',', $first_line);
				$count_first_line = count($first_line_exp);
				unset($first_line_exp[count($first_line_exp)-1]);

				// Creating the table from the first line comma separated
				//$this->_createTable($tablename, $first_line);

				// Truncate the table
				//$this->_db->truncateTable($tablename);

			} else {

				// Write the columns correctly
				$columns = '';

/*
				for ($y=0;$y<$count_first_line;$y++)
				{

					$col = trim($first_line_exp[$y]);

					$columns .= "`{$col}`";
					$columns = ($y == $count_first_line-1) ? $columns : $columns.",";

//print_r($columns);
				}
*/


				$regions = array();
				$regions[1] = 'CABA';
				$regions[2] = 'Buenos Aires';
				$regions[3] = 'Catamarca';
				$regions[4] = 'Cordoba';
				$regions[5] = 'Corrientes';
				$regions[6] = 'Chaco';
				$regions[7] = 'Chubut';
				$regions[8] = 'Entre Rios';
				$regions[9] = 'Formosa';
				$regions[10] = 'Jujuy';
				$regions[11] = 'La Pampa';
				$regions[12] = 'La Rioja';
				$regions[13] = 'Mendoza';
				$regions[14] = 'Misiones';
				$regions[15] = 'Neuquen';
				$regions[16] = 'Rio Negro';
				$regions[17] = 'Salta';
				$regions[18] = 'San Juan';
				$regions[19] = 'San Luis';
				$regions[20] = 'Santa Cruz';
				$regions[21] = 'Santa Fe';
				$regions[22] = 'Santiago Del Estero';
				$regions[23] = 'Tucuman';
				$regions[24] = 'Tierra Del Fuego';

				$explode = explode(',', $line);
				$data = array();


				if (count($explode) == 11)
				{

					for ($y=0;$y<$count_first_line;$y++)
					{
						if (isset($first_line_exp[$y]))
						{
							$column_name = $first_line_exp[$y];
							$data[$column_name] = isset($explode[$y]) ? $explode[$y] : '';
						}
					}




					// Check bad CABA regions
					$bad_regions_caba = array('C.A.B.A.', 'caba', 'Caba', 'CABA');

					if (in_array(trim($data['region']), $bad_regions_caba))
					{
						$data['region'] = 1;
						$data['city'] = 'C.A.B.A.';
					}

					// Remove accents
					$reg = $this->removeAccent($data['region']);

					// Check other regions
					if ($key = array_search(trim($reg), $regions))
					{
						$data['region'] = $key;
					}

					// Set correct name
					$data['name'] =  $data['firstname'] . " " . $data['lastname'];

					// Correct Gender\Gender
					if ($data['gender'] == 'Femenino')
					{
						$data['gender'] = 0;
					}else{
						$data['gender'] = 1;
					}

					// Trim username and email
					$data['username'] = trim($data['username']);
					$data['email'] = trim($data['email']);

					// Fix group
					$data['groups'] = array("10");

					// Fix password
					$data['password2'] = $data['password'];

					print_r($data);

					$userId = $this->addJoomlaUser($data);

					if ($userId == false)
					{
						continue;
					}

					$tuples = array();
					$order = 1;

					foreach ($data as $k => $v)
					{
						if (in_array($k, $this->profile_fields))
						{
							$tuples[] = '(' . $userId . ', ' . $this->_db->quote('profile.' . $k) . ', ' . $this->_db->quote(json_encode($v)) . ', ' . ($order++) . ')';
						}
					}

					$query = 'INSERT INTO #__user_profiles VALUES ' . implode(', ', $tuples);
					$this->_db->setQuery($query);
					$this->_db->execute();
				}

				/*
							$data = array(
				          "name"=>$name,
				          "username"=>$username,
				          "password"=>$password,
				          "password2"=>$password,
				          "email"=>$email,
				          "block"=>0,
				          "groups"=>array("1","2"),
				          "orgname" => 'SASASA'
				      );
				*/
			}

			$counter = $counter+1;
		}

	} // end method




	function addJoomlaUser($data) {
     jimport('joomla.user.helper');

     $user = new JUser;

     //Write to database
     if(!$user->bind($data)) {
         throw new Exception("Could not bind data. Error: " . $user->getError());
     }

		 if (!$user->save())
		 {
			 	if ($user->getError() != 'JLIB_DATABASE_ERROR_USERNAME_INUSE')
				{
         	throw new Exception("Could not save user. Error: " . $user->getError());
				}
				else if ($user->getError() == 'JLIB_DATABASE_ERROR_USERNAME_INUSE')
				{
					return false;
				}
     }

     return $user->id;
  }

	/**
	 * Reemplaza todos los acentos por sus equivalentes sin ellos
	 *
	 * @param $string
	 *  string la cadena a sanear
	 *
	 * @return $string
	 *  string saneada
	 */
	function removeAccent($string)
	{

	    $string = trim($string);

	    $string = str_replace(
	        array('á', 'à', 'ä', 'â', 'ª', 'Á', 'À', 'Â', 'Ä'),
	        array('a', 'a', 'a', 'a', 'a', 'A', 'A', 'A', 'A'),
	        $string
	    );

	    $string = str_replace(
	        array('é', 'è', 'ë', 'ê', 'É', 'È', 'Ê', 'Ë'),
	        array('e', 'e', 'e', 'e', 'E', 'E', 'E', 'E'),
	        $string
	    );

	    $string = str_replace(
	        array('í', 'ì', 'ï', 'î', 'Í', 'Ì', 'Ï', 'Î'),
	        array('i', 'i', 'i', 'i', 'I', 'I', 'I', 'I'),
	        $string
	    );

	    $string = str_replace(
	        array('ó', 'ò', 'ö', 'ô', 'Ó', 'Ò', 'Ö', 'Ô'),
	        array('o', 'o', 'o', 'o', 'O', 'O', 'O', 'O'),
	        $string
	    );

	    $string = str_replace(
	        array('ú', 'ù', 'ü', 'û', 'Ú', 'Ù', 'Û', 'Ü'),
	        array('u', 'u', 'u', 'u', 'U', 'U', 'U', 'U'),
	        $string
	    );

	    $string = str_replace(
	        array('ñ', 'Ñ', 'ç', 'Ç'),
	        array('n', 'N', 'c', 'C',),
	        $string
	    );

/*
	    //Esta parte se encarga de eliminar cualquier caracter extraño
	    $string = str_replace(
	        array("\", "¨", "º", "-", "~",
	             "#", "@", "|", "!", """,
	             "·", "$", "%", "&", "/",
	             "(", ")", "?", "'", "¡",
	             "¿", "[", "^", "<code>", "]",
	             "+", "}", "{", "¨", "´",
	             ">", "< ", ";", ",", ":",
	             ".", " "),
	        '',
	        $string
	    );
*/

	    return $string;
	}


} // end class

// Wrap the execution in a try statement to catch any exceptions thrown anywhere in the script.
try
{
	// Instantiate the application object, passing the class name to JCli::getInstance
	// and use chaining to execute the application.
	JApplicationCli::getInstance('MigrateCSV2MySQL')->execute();
}
catch (Exception $e)
{
	// An exception has been caught, just echo the message.
	fwrite(STDOUT, $e->getMessage() . "\n");
	exit($e->getCode());
}
