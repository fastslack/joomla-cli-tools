#!/usr/bin/php
<?php
/**
* JoomlaCliTools
*
* @version $Id$
* @package JoomlaCliTools
* @subpackage CompareTables
* @copyright Copyright 2004 - 2013 Matias Aguirre. All rights reserved.
* @license GNU General Public License version 2 or later.
* @author Matias Aguirre <maguirre@matware.com.ar>
* @link http://www.matware.com.ar
*/
// We are a valid Joomla entry point.
define('_JEXEC', 1);

// Setup the base path related constant.
define('JPATH_BASE', dirname(__FILE__));

// Bootstrap the application.
require dirname(dirname(__FILE__)).'/bootstrap.php';

class CompareTables extends JApplicationCli
{
	/**
	* The return string
	* @since 1.0
	*/
	public $_return = '';

	/**
	* Ascii color array
	*
	* @var array
	* @since 1.0
	*/
	public $_colors = array(
		'LIGHT_RED'   => "\033[1;31m",
		'LIGHT_GREEN' => "\033[1;32m",
		'YELLOW'      => "\033[1;33m",
		'LIGHT_BLUE'  => "\033[1;34m",
		'MAGENTA'     => "\033[1;35m",
		'LIGHT_CYAN'  => "\033[1;36m",
		'WHITE'       => "\033[1;37m",
		'NORMAL'      => "\033[0m",
		'BLACK'       => "\033[0;30m",
		'RED'         => "\033[0;31m",
		'GREEN'       => "\033[0;32m",
		'BROWN'       => "\033[0;33m",
		'BLUE'        => "\033[0;34m",
		'CYAN'        => "\033[0;36m",
		'BOLD'        => "\033[1m",
		'UNDERSCORE'  => "\033[4m",
		'REVERSE'     => "\033[7m",
	);

	/**
	* Class constructor.
	*
	* @return void
	*
	* @since 2.5.0
	*/
	public function __construct()
	{
		// Call the parent __construct method so it bootstraps the application class.
		parent::__construct();
	
		// Getting the parameters
		$this->params = new JRegistry(new JConfig);

		// Creating first dabatase instance
		$this->_db = JFactory::getDBO();

		// Creating second dabatase instance
		$this->_db_new = JDatabase::getInstance(
			array(
			'driver' => $this->get('new_dbtype'),
			'host' => $this->get('new_hostname'),
			'user' => $this->get('new_username'),
			'password' => $this->get('new_password'),
			'database' => $this->get('new_db'),
			'prefix' => $this->get('new_dbprefix'),
			)
		);

	}

	/**
	 * Execute
	 *
	 * @since	1.0
	 */
	public function execute()
	{
		// Getting the prefixes
		$prefixes = $this->_getPrefixes();

		// Getting the tables array
		$tables = $this->getTables($this->_db, $prefixes['pattern']);
		$new_tables = $this->getTables($this->_db_new, $prefixes['pattern_new']);

		for ($y=0;$y<count($tables);$y++) {

			// Removing the prefix of the table
			$table_without_prefix = str_replace($this->get('dbprefix'), "", $tables[$y]);
			$table_without_prefix_and_name = str_replace($prefixes['prefix'], "", $tables[$y]);

			// Getting the new table name
			$tablename = $prefixes['prefix_new'].$table_without_prefix_and_name;

			// Getting the first table columns and save it to tmp file
			$this->writeColumnsToFile ($this->_db, $tables[$y]);
			// Creating the diff files
			$this->createDiff($tables[$y]);

			/*
			 * Creating mysql ALTER query
			 */
			if ($this->get('create_alter_query') === true && $this->tableExists($tablename) === true) {

				// Reading the file
				$read = JFile::read('sql/'.$tables[$y].'.diff');
				$read = explode("\n", $read);

				// Count the lines
				$read_count = count($read);

				// Remove the last empty value
				$read = array_slice($read, 0, $read_count-1);

				// Initialize variables
				//$modif_array = array();
				$not_drop = array();
				$addrop = $unset = '';
				$disable = true;

				for($i=3;$i<$read_count-1;$i++) {

					$line = $read[$i];
					$values = $this->stripLine($line);
	
					$modif_array = array();

					// Search
					if ($values['char'] == "-") {

						$disable = false;
						$modif = false;

						// Check if is a modify of column
						for($e=3;$e<$read_count-1;$e++) {

							$line_mod = $read[$e];
							$values_mod = $this->stripLine($line_mod);

							if ($values_mod['char'] == "+") {

								if($values_mod['col_name'] == $values['col_name']) {

									$not_drop[] = $values['col_name'];

									//$primary = $this->_checkPrimary($tables[$y], $values_mod['col_name']);

									if ($values_mod['col_type'] != $values['col_type']) {
										// Adding value to array to prevent duplications
										$modif_array[] = $values['col_name'];
										// Creating the sql modify statement
										$addrop .= "\t\t\t.\" MODIFY `{$values['col_name']}` {$values_mod['col_type']} {$values_mod['col_null']}";
									}

								}
							}

						} // end for

						
						if (!in_array($values['col_name'], $not_drop)) {

							$addrop .= "\t\t\t.\" DROP COLUMN `{$values['col_name']}`,\"\n";
							$unset .= "\t\t\tunset(\$row['{$values['col_name']}']);\n";
						}

						if ( (in_array($values['col_name'], $modif_array)) || (!in_array($values['col_name'], $not_drop)) ) {
							if ($i == $read_count - 2) {
								$addrop .= "\";\n";
							}else{
								$addrop .= ",\"\n";
							}
						}			

					} // end if

				} // end for


				$added = false;

				for($i=3;$i<$read_count-1;$i++) {

					$line = $read[$i];
					$values = $this->stripLine($line);

					if ($values['char'] == "+") {

						$disable = false;
						$added = true;

						if (!in_array($values['col_name'], $modif_array) && !in_array($values['col_name'], $not_drop)) {
							$addrop .= "\t\t\t.\" ADD `{$values['col_name']}` {$values['col_type']}";
						}

					} // end if 

					if ( $values['char'] == "+" && !in_array($values['col_name'], $not_drop) ) {
						if ($i == $read_count - 2) {
							$addrop .= "\";\n";
						}else{
							$addrop .= ",\"\n";
						}
					}

				} // end for

				if ($added == false) {
					$addrop = substr($addrop, 0, -3);
					$addrop .= "\";\n";
				}

				if ($disable === false) {
					if ($this->get('create_jupgradepro_function') == true) {

						$alter_table = str_replace($this->get('new_dbprefix'), "", $prefixes['prefix_new']).$table_without_prefix_and_name;

						$this->_return .= $this->createMethods($table_without_prefix, $alter_table, $addrop, $unset, $disable);
					}else{
						$this->_return .= $addrop;
					}
				}

			} // end if

		} // end for

		echo (!empty($this->_return)) ? "<?php\n".$this->_return : "";

	} // end method

	/**
	 * Check if the column is a primary key
	 *
	 * @param   string   $table     The table fs this function
	 * @param   string   $column     The alter query
	 *
	 * @return  mixed    The return the function body or null if the query failed.
	 *
	 * @since   1.0
	 */
	public function _checkPrimary($table, $column) {

		/*
		 * Getting the first table columns and save it to tmp file
		 */
		$query = "SELECT COLUMN_NAME
			FROM `information_schema`.`COLUMNS`
			WHERE (`TABLE_SCHEMA` = '{$this->get('db')}')
			AND (`TABLE_NAME` = '{$table}')
			AND (`COLUMN_KEY` = 'PRI')";

		$this->_db->setQuery( $query );
		$primary = $this->_db->loadResult();

//print_r($column);

//echo "$primary == $column\n";

		return ($primary == $column) ? true : false;
	}

	/**
	 * Create the jUpgradePro methods to use with the libraries
	 *
	 * @param   string   $table     The table fs this function
	 * @param   string   $alter     The alter query
	 * @param   string   $unset     The unset functions list
	 *
	 * @return  mixed    The return the function body or null if the query failed.
	 *
	 * @since   1.0
	 */
	public function createMethods($table, $alter_table, $alter = null, $unset = null, $disable = true) {

		$disable = ($disable === true) ? "//" : "";

		// Reading the structurehook template
		$structurehook = JFile::read(JPATH_BASE.'/templates/jupgradepro.structurehook.php');
		$structurehook = str_replace("{DISABLE}", $disable, $structurehook);
		$structurehook = str_replace("{TABLE}", $table, $structurehook);
		$structurehook = str_replace("{ALTER_TABLE}", $alter_table, $structurehook);
		$structurehook = str_replace("{ALTER}", $alter, $structurehook);

		// Reading the datahook template
		$datahook = JFile::read(JPATH_BASE.'/templates/jupgradepro.datahook.php');
		$datahook = str_replace("{TABLE}", $table, $datahook);
		$datahook = str_replace("{UNSET}", $unset, $datahook);

		$body = ($disable === true) ? '' : $structurehook;
		$body .= ($disable === true) ? '' : $datahook;

		return $body;
	}

	/**
	 * Compare and create the diff files for table
	 *
	 * @param   string   $table     The table to compare
	 *
	 * @return  mixed    The return array or null if failed.
	 *
	 * @since   1.0
	 */
	public function createDiff($table) {

		// Getting the prefixes
		$prefixes = $this->_getPrefixes();

		// Removing the prefix of the table
		$table_without_prefix = str_replace($this->get('dbprefix'), "", $table);
		$table_without_prefix_and_name = str_replace($prefixes['prefix'], "", $table);

		// Getting the new table name
		$tablename = $prefixes['prefix_new'].$table_without_prefix_and_name;

		// Getting the variable to show the table on stdin
		$show_tables_diff = ($this->get('show_tables_diff') === true) ? '&' : '';

		if ( $this->tableExists($tablename) === true) {

			// Getting the second table columns and save it to tmp file
			$this->writeColumnsToFile ($this->_db_new, $tablename);

			// Writting the differences to file or/and show it on stdin
			$command = 'diff -Nru sql/'.$table.'.columns sql/'.$tablename.'.columns '.$show_tables_diff.'> sql/'.$table.'.diff';
			system($command);

		// Empty tables
		}else if ($this->get('show_tables_empty') === true) {

			// Writting the differences to file or/and show it on stdin
			$command = 'diff -Nru /dev/null sql/'.$table.'.columns '.$show_tables_diff.'> sql/'.$table.'.diff';
			system($command);
		}
	}

	/**
	 * Strip the line to get the different values
	 *
	 * @param   string   $line     The line value
	 *
	 * @return  mixed    The return array or null if failed.
	 *
	 * @since   1.0
	 */
	public function stripLine($line) {

		$return = array();

		$return['char'] = substr($line, 0, 1);

		$column =  substr($line, 1, strlen($line));
		$column = explode(" ", $column);
		$return['col_name'] = $column[0];
		$return['col_type'] = $column[1];
		$return['col_null'] = (isset($column[3])) ? "{$column[2]} {$column[3]}" : $column[2];
		$return['col_null'] = (isset($column[4])) ? "{$return['col_null']} {$column[4]}" : $return['col_null'];

		return $return;
	}

	/**
	 * Strip the line to get the different values
	 *
	 * @return  array    The return array or null if failed.
	 *
	 * @since   1.0
	 */
	public function _getPrefixes() {

		$return = array();

		// Getting the pattern and split with the prefix
		$return['pattern'] = $this->get('dbprefix').$this->get('pattern');
		$return['pattern_new'] = $this->get('new_dbprefix').$this->get('new_pattern');

		// Getting the prefix with the component name too
		$return['prefix'] = (substr($return['pattern'], -1) == '%') ? substr_replace($return['pattern'], "", -1) : $return['pattern'];
		$return['prefix_new'] = (substr($return['pattern_new'], -1) == '%') ? substr_replace($return['pattern_new'], "", -1) : $return['pattern_new'];

		return $return;
	}

	/**
	 * Set the table using mysql pattern
	 *
	 * @param   JDatabase   $db     Database connector class.
	 * @param   string   $pattern     Pattern matching using SQL simple regular expression comparison.
	 * @url	http://dev.mysql.com/doc/refman/5.0/en/string-comparison-functions.html#operator_like
	 *
	 * @return  mixed    The return value or null if the query failed.
	 *
	 * @since   1.0
	 */
	public function getTables(&$db, $pattern) {

		$query = "SHOW TABLES LIKE '{$pattern}'";
		$db->setQuery( $query );
		
		return $db->loadColumn();
	} // end method

	/**
	 * Check if table exists
	 *
	 * @param   string   $pattern     The table name
	 *
	 * @return  bool    True if exists
	 *
	 * @since   1.0
	 */
	function tableExists ($table) { 
		$tables = array();
		$tables = $this->_db_new->getTableList();

		return (in_array($table, $tables)) ? true : false;
	} // end method

	/**
	 * Write the columns of the table to file
	 *
	 * @param   JDatabase   $db     The database instance
	 * @param   string   $table     The table name
	 *
	 * @return  bool    True if ok
	 *
	 * @since   1.0
	 */
	function writeColumnsToFile ($db, $table) { 
		/*
		 * Getting the first table columns and save it to tmp file
		 */
		$query = "SHOW COLUMNS FROM {$table}";
		$db->setQuery( $query );
		$columns = $db->loadObjectList();

		$tbl = fopen('sql/'.$table.'.columns', 'wb');

		for($i=0;$i<count($columns);$i++) {
			$null = ($columns[$i]->Null == 'YES') ? 'NULL' : 'NOT NULL';
			fwrite($tbl, $columns[$i]->Field." ".$columns[$i]->Type." ".$null."\n");
		}
		fclose($tbl);

		return true;
	} // end method

} // end class

// Wrap the execution in a try statement to catch any exceptions thrown anywhere in the script.
try
{
	// Instantiate the application object, passing the class name to JCli::getInstance
	// and use chaining to execute the application.
	JApplicationCli::getInstance('CompareTables')->execute();
}
catch (Exception $e)
{
	// An exception has been caught, just echo the message.
	fwrite(STDOUT, $e->getMessage() . "\n");
	exit($e->getCode());
}
