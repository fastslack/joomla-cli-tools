#!/usr/bin/php
<?php
/**
* JoomlaCliTools
*
* @version $Id$
* @package JoomlaCliTools
* @subpackage CompareTables
* @copyright Copyright 2004 - 2013 Matias Aguirre. All rights reserved.
* @license GNU General Public License version 2 or later.
* @author Matias Aguirre <maguirre@matware.com.ar>
* @link http://www.matware.com.ar
*/
// We are a valid Joomla entry point.
define('_JEXEC', 1);

// Setup the base path related constant.
define('JPATH_BASE', dirname(__FILE__));

// Bootstrap the application.
require dirname(dirname(__FILE__)).'/bootstrap.php';

class CreateResourceFromTable extends JApplicationCli
{
	/**
	* The return string
	* @since 1.0
	*/
	public $_return = '';

	/**
	* Ascii color array
	*
	* @var array
	* @since 1.0
	*/
	public $_colors = array(
		'LIGHT_RED'   => "\033[1;31m",
		'LIGHT_GREEN' => "\033[1;32m",
		'YELLOW'      => "\033[1;33m",
		'LIGHT_BLUE'  => "\033[1;34m",
		'MAGENTA'     => "\033[1;35m",
		'LIGHT_CYAN'  => "\033[1;36m",
		'WHITE'       => "\033[1;37m",
		'NORMAL'      => "\033[0m",
		'BLACK'       => "\033[0;30m",
		'RED'         => "\033[0;31m",
		'GREEN'       => "\033[0;32m",
		'BROWN'       => "\033[0;33m",
		'BLUE'        => "\033[0;34m",
		'CYAN'        => "\033[0;36m",
		'BOLD'        => "\033[1m",
		'UNDERSCORE'  => "\033[4m",
		'REVERSE'     => "\033[7m",
	);

	/**
	* Class constructor.
	*
	* @return void
	*
	* @since 2.5.0
	*/
	public function __construct()
	{
		// Call the parent __construct method so it bootstraps the application class.
		parent::__construct();
	
		// Get the parameters
		$this->params = new JRegistry(new JConfig);

		// Create first dabatase instance
		$this->_db = JFactory::getDBO();
	}

	/**
	 * Execute
	 *
	 * @since	1.0
	 */
	public function execute()
	{
		$table = $this->params->get('table');

		$this->writeColumnsToFile($table);

	} // end method

	/**
	 * Write the columns of the table to file
	 *
	 * @param   JDatabase   $db     The database instance
	 * @param   string   $table     The table name
	 *
	 * @return  bool    True if ok
	 *
	 * @since   1.0
	 */
	function writeColumnsToFile ($table) { 
		/*
		 * Getting the first table columns and save it to tmp file
		 */
		$query = "SHOW COLUMNS FROM {$table}";
		$this->_db->setQuery( $query );
		$columns = $this->_db->loadObjectList();

		$tbl = fopen('sql/'.$table.'.columns', 'wb');

		$total = count($columns);

		fwrite($tbl, "{\n");

		for($i=0;$i<$total;$i++) {

			$comma = ',';
			$name = $columns[$i]->Field;
			$type = explode("(", $columns[$i]->Type);
			$type = $type[0];

			switch ($type) {
				case 'int':
				case 'tinyint':
					$type = 'int';
					break;

				case 'varchar':
					$type = 'string';
					break;
			}

			if ($i == $total-1)
				$comma = '';

			$write = "\t\"/{$name}\":\"{$type}:{{$name}}\"{$comma}\n";

			fwrite($tbl, $write);
		}

		fwrite($tbl, "}");

		fclose($tbl);

		return true;
	} // end method

} // end class

// Wrap the execution in a try statement to catch any exceptions thrown anywhere in the script.
try
{
	// Instantiate the application object, passing the class name to JCli::getInstance
	// and use chaining to execute the application.
	JApplicationCli::getInstance('CreateResourceFromTable')->execute();
}
catch (Exception $e)
{
	// An exception has been caught, just echo the message.
	fwrite(STDOUT, $e->getMessage() . "\n");
	exit($e->getCode());
}
