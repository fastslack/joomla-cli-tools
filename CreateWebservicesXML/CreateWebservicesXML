#!/usr/bin/php
<?php
/**
* JoomlaCliTools
*
* @version $Id$
* @package JoomlaCliTools
* @subpackage CreateWebservicesXML
* @copyright Copyright 2004 - 2015 Matias Aguirre. All rights reserved.
* @license GNU General Public License version 2 or later.
* @author Matias Aguirre <maguirre@matware.com.ar>
* @link http://www.matware.com.ar
*/
// We are a valid Joomla entry point.
define('_JEXEC', 1);

// Setup the base path related constant.
define('JPATH_BASE', dirname(__FILE__));

// Bootstrap the application.
require dirname(dirname(__FILE__)).'/bootstrap.php';

class CreateTableClass extends JApplicationCli
{
	/**
	* Class constructor.
	*
	* @since 1.0.0
	*/
	public function __construct()
	{
		// Call the parent __construct method so it bootstraps the application class.
		parent::__construct();

		// Getting the parameters
		$this->params = new JRegistry(new JConfig);

		// Creating first dabatase instance
		$this->_db = JFactory::getDBO();
	}

	/**
	 * Execute
	 *
	 * @since	1.0.0
	 */
  public function execute()
  {

		$query = "SHOW COLUMNS FROM {$this->get('table')}";
		$this->_db->setQuery( $query );
		$columns = $this->_db->loadObjectList();

		$body = "\n<resources>";

		for ($y=0;$y<count($columns);$y++) {
			$column = &$columns[$y];

			$type = explode("(", $column->Type);

			$body .= "\n\t<resource displayName=\"{$column->Field}\" transform=\"{$type[0]}\" fieldFormat=\"{{$column->Field}}\" displayGroup=\"\" resourceSpecific=\"rcwsGlobal\" />";
		}

		$body .= "\n</resources>\n";

	echo $body;

  }

} // end class

// Wrap the execution in a try statement to catch any exceptions thrown anywhere in the script.
try
{
	// Instantiate the application object, passing the class name to JCli::getInstance
	// and use chaining to execute the application.
	JApplicationCli::getInstance('CreateTableClass')->execute();
}
catch (Exception $e)
{
	// An exception has been caught, just echo the message.
	fwrite(STDOUT, $e->getMessage() . "\n");
	exit($e->getCode());
}
