#!/usr/bin/php
<?php
/**
* JoomlaCliTools
*
* @version $Id$
* @package MatWare
* @subpackage JoomlaCliTools
* @copyright Copyright 2004 - 2013 Matias Aguirre. All rights reserved.
* @license GNU General Public License version 2 or later.
* @author Matias Aguirre <maguirre@matware.com.ar>
* @link http://www.matware.com.ar
*/
// We are a valid Joomla entry point.
define('_JEXEC', 1);

// Setup the base path related constant.
define('JPATH_BASE', dirname(__FILE__));

// Bootstrap the application.
require dirname(dirname(__FILE__)).'/bootstrap.php';

class MigrateCSV2MySQL extends JApplicationCli
{
	/**
	* Ascii color array
	*
	* @var array
	* @since 1.0
	*/
	public $_c = array(
		'LIGHT_RED'   => "\033[1;31m",
		'LIGHT_GREEN' => "\033[1;32m",
		'YELLOW'      => "\033[1;33m",
		'LIGHT_BLUE'  => "\033[1;34m",
		'MAGENTA'     => "\033[1;35m",
		'LIGHT_CYAN'  => "\033[1;36m",
		'WHITE'       => "\033[1;37m",
		'NORMAL'      => "\033[0m",
		'BLACK'       => "\033[0;30m",
		'RED'         => "\033[0;31m",
		'GREEN'       => "\033[0;32m",
		'BROWN'       => "\033[0;33m",
		'BLUE'        => "\033[0;34m",
		'CYAN'        => "\033[0;36m",
		'BOLD'        => "\033[1m",
		'UNDERSCORE'  => "\033[4m",
		'REVERSE'     => "\033[7m",
	);

	/**
	* Class constructor.
	*
	* @return void
	*
	* @since 2.5.0
	*/
	public function __construct()
	{
		// Call the parent __construct method so it bootstraps the application class.
		parent::__construct();
	
		// Getting the parameters
		$this->params = new JRegistry(new JConfig);

		// Creating first dabatase instance
		$this->_db = JFactory::getDBO();
	}

	/**
	 * Screen
	 *
	 * @return	none
	 * @since	2.5.0
	 */
	public function screen()
	{
		// Print help
		$this->out();
		$this->out(' MigrateCSV2MySQL v1.0');
		$this->out(' Usage: MigrateCSV2MySQL [--migrate OR/AND --clean] file.csv');
		$this->out();
		$this->out(' Author: Matias Aguirre (maguirre@matware.com.ar)');
		$this->out(' License: GNU/GPL http://www.gnu.org/licenses/gpl-2.0-standalone.html');
		$this->out();
		exit;
	}

	/**
	 * Execute
	 *
	 * @return	none
	 * @since	2.5.0
	 */
	public function execute()
	{

		$clean = $this->input->get('clean');
		$migrate = $this->input->get('migrate');

		if (empty($clean) && empty($migrate)) {
			$this->screen();
		}

		if (!empty($clean)) {
			$this->clean($clean);
		}

		if (!empty($migrate)) {

			$migrate = ($migrate == 1 && isset($clean)) ? $clean : $migrate;

			$this->migrate($migrate);
		}


	} // end method

	public function migrate($file)
	{
		$ext = JFile::getExt($file);
		$name = JFile::stripExt(basename($file));

		if ($ext == 'new') {
			$name = JFile::stripExt($name);
		}

		$tablename = '#__import_'.strtolower($name);

		//$read = file_get_contents ($file);
		$read = JFile::read($file);
		$arrRead = explode("\n", $read);

		$count = count($arrRead);

		$counter = 0;

		$this->out("{$this->_c['WHITE']}-------------------------------------------------------------------------------------------------");
		$this->out("{$this->_c['WHITE']}|  {$this->_c['BLUE']}	Migrating CSV to MySQL. {$count} rows.");

		echo "{$this->_c['WHITE']}|  {$this->_c['RED']}[{$this->_c['YELLOW']}";

		for($i=0;$i<$count;$i++) {

			$line = &$arrRead[$i];

			if ($counter % 100 == 0 && $counter != 0) {
				$this->out( "{$this->_c['RED']}] {$this->_c['LIGHT_CYAN']}{$counter} / {$count}" );
				echo "{$this->_c['WHITE']}|  {$this->_c['RED']}[{$this->_c['YELLOW']}";
			}

			echo "â€¢";

			if ($i == 0) {

				$first_line = $line;

				// Creating the table from the first line comma separated
				$this->_createTable($tablename, $first_line);

				// Truncate the table
				$this->_db->truncateTable($tablename);

			}else{

				// Write the columns correctly
				$columns = '';
				$first_line_exp = explode(',', $first_line);
				$count_first_line = count($first_line_exp);

				for($y=0;$y<$count_first_line;$y++) {

					$col = trim($first_line_exp[$y]);

					$columns .= "`{$col}`";
					$columns = ($y == $count_first_line-1) ? $columns : $columns.",";
				}

				// Write the values correctly
				$values = '';
				$line_exp = explode(',"', $line);
				$values_exp = explode(',', $line_exp[0]);

				for($y=0;$y<$count_first_line;$y++) {

					$val = (!empty($values_exp[$y])) ? trim($values_exp[$y]) : '';

					$values .= $this->_db->quote($val);

if ($y == 12) {
	if (strlen($val) != 0) {
		echo $this->strBytes($val);
	}
}


					$values = ($y == $count_first_line-1) ? $values : $values.",";
				}

				$query = $this->_db->getQuery(true);
				$query->insert($tablename)->columns($columns)->values($values);

				$this->_db->setQuery($query)->execute();

			}

			$counter = $counter+1;
		}

	} // end method

	/**
	* Count the number of bytes of a given string.
	* Input string is expected to be ASCII or UTF-8 encoded.
	* Warning: the function doesn't return the number of chars
	* in the string, but the number of bytes.
	* See http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
	* for information on UTF-8.
	*
	* @param string $str The string to compute number of bytes
	*
	* @return The length in bytes of the given string.
	*/
	public function strBytes($str){
	 // STRINGS ARE EXPECTED TO BE IN ASCII OR UTF-8 FORMAT
	 
	 // Number of characters in string
	 $strlen_var = strlen($str);
	 
	 // string bytes counter
	 $d = 0;
	 
	 /*
	 * Iterate over every character in the string,
	 * escaping with a slash or encoding to UTF-8 where necessary
	 */
	 for($c = 0; $c < $strlen_var; ++$c){
		$ord_var_c = ord($str{$c});
		switch(true){
		case(($ord_var_c >= 0x20) && ($ord_var_c <= 0x7F)):
		 // characters U-00000000 - U-0000007F (same as ASCII)
		 $d++;
		 break;
		case(($ord_var_c & 0xE0) == 0xC0):
		 // characters U-00000080 - U-000007FF, mask 110XXXXX
		 $d+=2;
		 break;
		case(($ord_var_c & 0xF0) == 0xE0):
		 // characters U-00000800 - U-0000FFFF, mask 1110XXXX
		 $d+=3;
		 break;
		case(($ord_var_c & 0xF8) == 0xF0):
		 // characters U-00010000 - U-001FFFFF, mask 11110XXX
		 $d+=4;
		 break;
		case(($ord_var_c & 0xFC) == 0xF8):
		 // characters U-00200000 - U-03FFFFFF, mask 111110XX
		 $d+=5;
		 break;
		case(($ord_var_c & 0xFE) == 0xFC):
		 // characters U-04000000 - U-7FFFFFFF, mask 1111110X
		 $d+=6;
		 break;
		 default:
		 $d++;
		};
	 };
	 return $d;
	}

	public function clean($file)
	{
		$filesize = filesize($file);

		$output = fopen($file.'.new', 'wb');
		$read = file_get_contents ($file);
		$arrRead = explode("\n", $read);

		$count = count($arrRead);

		for($i=0;$i<$count;$i++) {

			$line = &$arrRead[$i];

			$last_char = substr($line, -1, 1);
			$ord_last_char = ord($last_char);

			$penultimate_char = substr($line, -2, 1);
			$ord_penultimate_char = ord($penultimate_char);

			// [>][62]
			// [,][44]
			// [~][126]
			$remove_new_line = array( 44);

			if ($ord_last_char == 13) {
				if (!in_array($ord_penultimate_char, $remove_new_line) && $i != 0) {
					$line = substr($line, 0, -1);
				}else if ($i == 0) {
					$line = $line."\n";
				}else{
					$line = $line."\n";
				}
			}

			fwrite($output, $line);
		}

		fclose($output);
	}

	public function _createTable($tablename, $line)
	{
		$columns = (array) explode(',', $line);

		$create = 'CREATE TABLE IF NOT EXISTS `'.$tablename.'`
			(
			`import_custom_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
			';

		$count_col = count($columns);

		for($y=0;$y<$count_col;$y++) {

			$col = trim($columns[$y]);

			$create .= "`{$col}` LONGTEXT NOT NULL,";
		}

		$create .= "\nPRIMARY KEY (`import_custom_id`)
			) ENGINE=InnoDB  DEFAULT CHARSET=utf8 ROW_FORMAT=COMPRESSED;";

		$this->_db->setQuery($create);
		$this->_db->query();
	}


} // end class

// Wrap the execution in a try statement to catch any exceptions thrown anywhere in the script.
try
{
	// Instantiate the application object, passing the class name to JCli::getInstance
	// and use chaining to execute the application.
	JApplicationCli::getInstance('MigrateCSV2MySQL')->execute();
}
catch (Exception $e)
{
	// An exception has been caught, just echo the message.
	fwrite(STDOUT, $e->getMessage() . "\n");
	exit($e->getCode());
}
