#!/usr/bin/php
<?php
/**
* JoomlaCliTools
*
* @version    $Id$
* @package    JoomlaCliTools
* @copyright  Copyright 2021 Matias Aguirre. All rights reserved.
* @license    GNU General Public License version 2 or later.
* @author     Matias Aguirre <maguirre@matware.com.ar>
* @link       https://matware.com.ar
*/

// We are a valid Joomla entry point.
define('_JEXEC', 1);

// Setup the base path related constant.
define('JPATH_BASE', dirname(__FILE__));

// Bootstrap the application.
require dirname(dirname(__FILE__)).'/bootstrap.php';

class MySQLCreate extends JApplicationCli
{
	/**
	* Class constructor.
	*
	* @return void
	*
	* @since 2.5.0
	*/
	public function __construct()
	{
		// Call the parent __construct method so it bootstraps the application class.
		parent::__construct();

		// Creating first dabatase instance
		$this->_db = JFactory::getDBO();

		// Getting the parameters
		$this->params = new JRegistry(new JConfig);
	}


	/**
	 * Execute
	 *
	 * @return	none
	 * @since	2.5.0
	 */
	public function execute()
	{
		$schema = $this->input->get('schema');

		if (!empty($schema)) {
			$this->createSchema();
		}


		//print_r($this->input->get('table'));

	} // end method

	/**
	 * Execute
	 *
	 * @return	none
	 * @since	2.5.0
	 */
	public function createSchema()
	{

		// Reading the file
		$read = JFile::read('sql/'.$tables[$y].'.diff');
		//$read = explode("\n", $read);

		//print_r($this->input->get('table'));

	} // end method

} // end class

// Wrap the execution in a try statement to catch any exceptions thrown anywhere in the script.
try
{
	// Instantiate the application object, passing the class name to JCli::getInstance
	// and use chaining to execute the application.
	JApplicationCli::getInstance('MySQLCreate')->execute();
}
catch (Exception $e)
{
	// An exception has been caught, just echo the message.
	fwrite(STDOUT, $e->getMessage() . "\n");
	exit($e->getCode());
}
